{"version":3,"sources":["webpack:///./src/pages/modifiers.js"],"names":["Modifiers","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","style","flex","flexDirection","this","renderHTML","href","color","fontSize","display","text","Component"],"mappings":"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","file":"component---src-pages-modifiers-js-ba129459fbcca91350d5.js","sourcesContent":["import React, {Component} from 'react';\nimport './modifiers.scss';\n\nclass Modifiers extends Component {\n\n  render() {\n    return (\n      <div className=\"modifiers-page\">\n        <h1>Modifiers</h1>\n        <div style={{flex: 1, flexDirection: 'row'}}>\n          <div className=\"article\">\n            Modifiers are essentially shortcuts used to layout and style RNUILIB's components.<br />\n            They can be helpful when facing a new design or a complex layout by simplify the style prop composition.\n            <br />For example, when you want to align sub-components horizontally,\n            instead of writing:\n            <pre>{this.renderHTML('<View style={{flexDirection: \\'row\\'}}>')}</pre> you will use this ALIGNMENT modifier:\n            <pre>{this.renderHTML('<View row>')}</pre>\n            The ‘row’ modifier will simply change the view direction from its default direction (column) to a row,\n            horizontal, direction.<br />\n            Another example is using this TYPOGRAPHY modifier:\n            <pre>{this.renderHTML('<Text text10>Some text</Text>')}</pre>\n            instead of writing this:\n            <pre>{this.renderHTML('<Text style={{fontFamily: \\'Helvetica\\', fontSize: \\'64\\'}}>Some text</Text>')}</pre>\n            <br />\n            For closer look at the presets run the demo project on a mobile device or simulator.<br />\n            <span> See <a href=\"https://medium.com/the-react-native-log/easy-layouting-with-react-native-b96c4c6fae7/\">this</a> blog post for an elaborate discussion.</span>\n            <h2>Style</h2>\n            <div>\n              The base foundation of each UI component is its style. We use basic style presets to define the rules and the style guide we follow.\n              Our style presetes includes: Colors, Typography, Shadows, Border Radius and more..\n              You can easily use them anywhere in your code as you would have used any other constant value, or as a component modifier.\n              You can also define your own presets and use them as you would the ui lib ones.<br />\n              <pre>{this.renderHTML(\n                'Colors.loadColors({\\n' +\n                '  pink: \\'#FF69B4\\',\\n' +\n                '  gold: \\'#FFD700\\',\\n' +\n                '});')}\n              </pre>\n              <pre>{this.renderHTML('Typography.loadTypographies({ h1: {fontSize: 26, fontWeight: \\'300\\', lineHeight: 80}, });')}</pre>\n              <span>\n                To generate this text: <h1 style={{color: '#FF69B4', fontSize: '26', display: 'inline'}}>Hello World</h1> use this line: <pre>{this.renderHTML('<Text h1 pink>Hello World</Text>')}</pre><br />\n                It will use the h1 typography preset and the pink color preset to style the Text element.<br /><br />\n                Our style presets are translated into modifiers that will help you create a stunning UI easily and quickly.\n              </span>\n            </div>\n          </div>\n          <div>\n            <table>\n              <tr>\n                <th>Modifier</th>\n                <th>Description</th>\n                <th>Presets</th>\n              </tr>\n              <tr>\n                <td>Alignment</td>\n                <td>Aligns the component's content</td>\n                <td>row, column, spread, centerH, centerV, left, right, top, bottom</td>\n              </tr>\n              <tr>\n                <td>Flex</td>\n                <td>The way the component is stretches inside its parent</td>\n                <td>flex, flexGrow, flexShrink, flex-[value]</td>\n              </tr>\n              <tr>\n                <td>Margin</td>\n                <td>Component's margins</td>\n                <td>margin-[value], marginL-[value], marginR-[value], marginT-[value], marginB-[value]</td>\n              </tr>\n              <tr>\n                <td>Padding</td>\n                <td>Component's padding</td>\n                <td>padding-[value], paddingL-[value], paddingR-[value], paddingT-[value], paddingB-[value]</td>\n              </tr>\n              <tr>\n                <td>Colors</td>\n                <td>Can be used to specify a color anywhere needed, like for the component's text color.<br />\n                  For example: green10 = #00A65F\n                </td>\n                <td>dark[10-80], blue[10-80], cyan[10-80], green[10-80], yellow[10-80],\n                  orange[10-80], red[10-80], purple[10-80], violet[10-80]</td>\n              </tr>\n              <tr>\n                <td>Background</td>\n                <td>Component's background color.<br />Use with a color value. For example: bg-red30</td>\n                <td>background-[color-value], bg-[color-value]</td>\n              </tr>\n              <tr>\n                <td>Typography</td>\n                <td>Component's font size. <br />For example, text10 = 64 font size while text100 = 11 font size</td>\n                <td>text[10-100]</td>\n              </tr>\n              <tr>\n                <td>Border Radius</td>\n                <td>Component's border radius.</td>\n                <td>br[0-100]</td>\n              </tr>\n              <tr>\n                <td>Spacing</td>\n                <td>Component's spacing.</td>\n                <td>s[1-10]</td>\n              </tr>\n              <tr>\n                <td>Shadows (for iOS)</td>\n                <td>Component's shadow, for dark or light backgrounds.</td>\n                <td>dark[10-40], white[10-40]</td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderHTML(text) {\n    return (`${text}`);\n  }\n}\n\nexport default Modifiers;\n"],"sourceRoot":""}